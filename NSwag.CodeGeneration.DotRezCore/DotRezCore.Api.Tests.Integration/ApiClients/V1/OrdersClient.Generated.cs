//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     $DotRezCore.Api.Tests.Integration.ModelGenerator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------;
namespace DotRezCore.Api.Tests.Integration.ApiClients.V1
{
    public partial class OrdersClient 
    {
        private System.Net.Http.HttpClient _httpClient;
        private Newtonsoft.Json.JsonSerializerSettings _serializerSettings;
        private Microsoft.Extensions.Logging.ILogger<OrdersClient> _logger;
        public string XSessionToken { get; private set; } = string.Empty;
        public string DefaultCulture { get; } = "en-IE";
         
        public OrdersClient(System.Net.Http.HttpClient httpClient, Microsoft.Extensions.Logging.ILogger<OrdersClient> logger)
        {
            _httpClient = httpClient;
            _serializerSettings = new Newtonsoft.Json.JsonSerializerSettings();
            _logger = logger;
        }
        
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<DotRezCore.Api.Tests.Integration.Models.V1.Order>> GetAsync(DotRezCore.Api.Tests.Integration.Models.V1.GetOrderRequest request)
        {
            return await GetAsync(request, XSessionToken);
        }
        public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetResponseAsync(DotRezCore.Api.Tests.Integration.Models.V1.GetOrderRequest request)
        {
            return await GetResponseAsync(request, XSessionToken);
        }
        
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<DotRezCore.Api.Tests.Integration.Models.V1.Order>> GetAsync(DotRezCore.Api.Tests.Integration.Models.V1.GetOrderRequest request, string xsessiontoken)
        { 
            string content = string.Empty;
            try
            {
                var response = await GetResponseAsync(request, xsessiontoken);
                content = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.List<DotRezCore.Api.Tests.Integration.Models.V1.Order>>(content, _serializerSettings);
                return result;
            }
            catch(System.Exception ex)
            {
                Microsoft.Extensions.Logging.LoggerExtensions.LogError(_logger, default(Microsoft.Extensions.Logging.EventId), ex, "There was an error while making a API call. Response content is {0}", content);
                throw;
            }
        }
        
        public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetResponseAsync(DotRezCore.Api.Tests.Integration.Models.V1.GetOrderRequest request, string xsessiontoken)
        {
            using(var httpRequestMessage = new System.Net.Http.HttpRequestMessage())
            {
                var urlStringBuilder = new System.Text.StringBuilder("api/Orders");
                urlStringBuilder.Append("?");
                urlStringBuilder.Append(SerializeToQueryString(request));
                httpRequestMessage.Method = new System.Net.Http.HttpMethod("GET");
                httpRequestMessage.RequestUri = new System.Uri(urlStringBuilder.ToString(), System.UriKind.RelativeOrAbsolute);
                httpRequestMessage.Headers.Add("X-Session-Token", xsessiontoken);
                var response = await _httpClient.SendAsync(httpRequestMessage);
                response.EnsureSuccessStatusCode();
                if(response.Headers.TryGetValues(DotRezCore.Api.Constants.Session.XSessionTokenHeaderName, out var sessionTokenHeaders))
                {
                    XSessionToken = System.Linq.Enumerable.First(sessionTokenHeaders);
                }
                return response;
            }
        }
        
        public async System.Threading.Tasks.Task<DotRezCore.Api.Tests.Integration.Models.V1.Order> PostAsync(DotRezCore.Api.Tests.Integration.Models.V1.Order order)
        {
            return await PostAsync(order, XSessionToken);
        }
        public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostResponseAsync(DotRezCore.Api.Tests.Integration.Models.V1.Order order)
        {
            return await PostResponseAsync(order, XSessionToken);
        }
        
        public async System.Threading.Tasks.Task<DotRezCore.Api.Tests.Integration.Models.V1.Order> PostAsync(DotRezCore.Api.Tests.Integration.Models.V1.Order order, string xsessiontoken)
        { 
            string content = string.Empty;
            try
            {
                var response = await PostResponseAsync(order, xsessiontoken);
                content = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<DotRezCore.Api.Tests.Integration.Models.V1.Order>(content, _serializerSettings);
                return result;
            }
            catch(System.Exception ex)
            {
                Microsoft.Extensions.Logging.LoggerExtensions.LogError(_logger, default(Microsoft.Extensions.Logging.EventId), ex, "There was an error while making a API call. Response content is {0}", content);
                throw;
            }
        }
        
        public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostResponseAsync(DotRezCore.Api.Tests.Integration.Models.V1.Order order, string xsessiontoken)
        {
            using(var httpRequestMessage = new System.Net.Http.HttpRequestMessage())
            {
                var urlStringBuilder = new System.Text.StringBuilder("api/Orders");
                httpRequestMessage.Method = new System.Net.Http.HttpMethod("POST");
                httpRequestMessage.RequestUri = new System.Uri(urlStringBuilder.ToString(), System.UriKind.RelativeOrAbsolute);
                httpRequestMessage.Headers.Add("X-Session-Token", xsessiontoken);
                System.Net.Http.StringContent content = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(order, _serializerSettings));
                content.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                httpRequestMessage.Content = content;
                var response = await _httpClient.SendAsync(httpRequestMessage);
                response.EnsureSuccessStatusCode();
                if(response.Headers.TryGetValues(DotRezCore.Api.Constants.Session.XSessionTokenHeaderName, out var sessionTokenHeaders))
                {
                    XSessionToken = System.Linq.Enumerable.First(sessionTokenHeaders);
                }
                return response;
            }
        }
        
        public async System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DotRezCore.Api.Tests.Integration.Models.V1.Order>> GetSomethingElseGetAsync(int id, int id2, System.DateTime id3)
        {
            return await GetSomethingElseGetAsync(id, id2, id3, XSessionToken);
        }
        public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetSomethingElseGetResponseAsync(int id, int id2, System.DateTime id3)
        {
            return await GetSomethingElseGetResponseAsync(id, id2, id3, XSessionToken);
        }
        
        public async System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DotRezCore.Api.Tests.Integration.Models.V1.Order>> GetSomethingElseGetAsync(int id, int id2, System.DateTime id3, string xsessiontoken)
        { 
            string content = string.Empty;
            try
            {
                var response = await GetSomethingElseGetResponseAsync(id, id2, id3, xsessiontoken);
                content = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, DotRezCore.Api.Tests.Integration.Models.V1.Order>>(content, _serializerSettings);
                return result;
            }
            catch(System.Exception ex)
            {
                Microsoft.Extensions.Logging.LoggerExtensions.LogError(_logger, default(Microsoft.Extensions.Logging.EventId), ex, "There was an error while making a API call. Response content is {0}", content);
                throw;
            }
        }
        
        public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetSomethingElseGetResponseAsync(int id, int id2, System.DateTime id3, string xsessiontoken)
        {
            using(var httpRequestMessage = new System.Net.Http.HttpRequestMessage())
            {
                var urlStringBuilder = new System.Text.StringBuilder("api/Orders/GetSomethingElse");
                urlStringBuilder.Append("?");
                urlStringBuilder.AppendFormat("{0}={1}&" , "id", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                urlStringBuilder.AppendFormat("{0}={1}&" , "id2", System.Uri.EscapeDataString(ConvertToString(id2, System.Globalization.CultureInfo.InvariantCulture)));
                urlStringBuilder.AppendFormat("{0}={1}" , "id3", System.Uri.EscapeDataString(id3.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
                httpRequestMessage.Method = new System.Net.Http.HttpMethod("GET");
                httpRequestMessage.RequestUri = new System.Uri(urlStringBuilder.ToString(), System.UriKind.RelativeOrAbsolute);
                httpRequestMessage.Headers.Add("X-Session-Token", xsessiontoken);
                var response = await _httpClient.SendAsync(httpRequestMessage);
                response.EnsureSuccessStatusCode();
                if(response.Headers.TryGetValues(DotRezCore.Api.Constants.Session.XSessionTokenHeaderName, out var sessionTokenHeaders))
                {
                    XSessionToken = System.Linq.Enumerable.First(sessionTokenHeaders);
                }
                return response;
            }
        }
        
        public async System.Threading.Tasks.Task<DotRezCore.Api.Tests.Integration.Models.V1.Order> ByIdGetAsync(int id)
        {
            return await ByIdGetAsync(id, XSessionToken);
        }
        public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> ByIdGetResponseAsync(int id)
        {
            return await ByIdGetResponseAsync(id, XSessionToken);
        }
        
        public async System.Threading.Tasks.Task<DotRezCore.Api.Tests.Integration.Models.V1.Order> ByIdGetAsync(int id, string xsessiontoken)
        { 
            string content = string.Empty;
            try
            {
                var response = await ByIdGetResponseAsync(id, xsessiontoken);
                content = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<DotRezCore.Api.Tests.Integration.Models.V1.Order>(content, _serializerSettings);
                return result;
            }
            catch(System.Exception ex)
            {
                Microsoft.Extensions.Logging.LoggerExtensions.LogError(_logger, default(Microsoft.Extensions.Logging.EventId), ex, "There was an error while making a API call. Response content is {0}", content);
                throw;
            }
        }
        
        public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> ByIdGetResponseAsync(int id, string xsessiontoken)
        {
            using(var httpRequestMessage = new System.Net.Http.HttpRequestMessage())
            {
                var urlStringBuilder = new System.Text.StringBuilder("api/Orders/{id}");
                urlStringBuilder.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                httpRequestMessage.Method = new System.Net.Http.HttpMethod("GET");
                httpRequestMessage.RequestUri = new System.Uri(urlStringBuilder.ToString(), System.UriKind.RelativeOrAbsolute);
                httpRequestMessage.Headers.Add("X-Session-Token", xsessiontoken);
                var response = await _httpClient.SendAsync(httpRequestMessage);
                response.EnsureSuccessStatusCode();
                if(response.Headers.TryGetValues(DotRezCore.Api.Constants.Session.XSessionTokenHeaderName, out var sessionTokenHeaders))
                {
                    XSessionToken = System.Linq.Enumerable.First(sessionTokenHeaders);
                }
                return response;
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            return System.Convert.ToString(value, cultureInfo);
        }
    
        private string SerializeToQueryString(object request)
        {
            return string.Join("&", System.Linq.Enumerable.Select(request.GetType().GetProperties(), property => $"{property.Name}={System.Uri.EscapeDataString(property.GetValue(request).ToString())}"));
        }
    }
}
