@using NSwag
@using NSwag.CodeGeneration.CSharp.Models
@using NSwag.CodeGeneration.DotRezCore
@using RazorLight.Text
@model NSwag.CodeGeneration.DotRezCore.DotRezClientTemplateModel
@Model.ClientClassAccessModifier partial class @Model.Class @(Model.HasBaseClass ? $": {@Model.BaseClass}" : string.Empty)
{
    private @Model.HttpClientType _httpClient;
    private Newtonsoft.Json.JsonSerializerSettings _serializerSettings;
    private Microsoft.Extensions.Logging.ILogger<@Model.Class> _logger;
    @{
    <text>
    public @(Model.Class)(@Raw(Model.HttpClientType) httpClient, Microsoft.Extensions.Logging.ILogger<@Model.Class> logger)
    {
        _httpClient = httpClient;
        _serializerSettings = new Newtonsoft.Json.JsonSerializerSettings();
        _logger = logger;
    }
    </text>
    }
    @foreach (var operation in Model.Operations)
    {
    <text>
    @operation.MethodAccessModifier async @Raw(operation.ResultType) @(operation.ActualOperationName)Async(@CreateMethodArguments(operation))
    { 
        string content = string.Empty;
        try
        {
            var response = await @(operation.ActualOperationName)ResponseAsync(@CreateMethodParameters(operation));
            response.EnsureSuccessStatusCode();
            content = await response.Content.ReadAsStringAsync();
            @if(operation.HasResult)
            {
            @:var result = Newtonsoft.Json.JsonConvert.DeserializeObject<@Raw(operation.SyncResultType)>(content, _serializerSettings);
            @:return result;
            }
        }
        catch(System.Exception ex)
        {
            Microsoft.Extensions.Logging.LoggerExtensions.LogError(_logger, default(Microsoft.Extensions.Logging.EventId), ex, "There was an error while making a API call. Response content is {0}", content);
            throw;
        }
    }
        
    @operation.MethodAccessModifier async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> @(operation.ActualOperationName)ResponseAsync(@CreateMethodArguments(operation))
    {
        using(var httpRequestMessage = new System.Net.Http.HttpRequestMessage())
        {
            var urlStringBuilder = new System.Text.StringBuilder("@operation.Path");
            @foreach (var parameter in @operation.PathParameters)
            {
            
            @:urlStringBuilder.Replace("{@parameter.VariableName}", @RenderEncodeParameterSegment(parameter));
            }
            @if (@operation.HasQueryParameters)
            {
                var queryParametersList = operation.QueryParameters.ToList();
            @:urlStringBuilder.Append("?");
                for (var parameterIndex = 0; parameterIndex < queryParametersList.Count; parameterIndex ++)
                {
                    var operationQueryParameter = queryParametersList[parameterIndex];
                    if (IsComplexQueryParameter(operationQueryParameter))
                    {
                        @*
                        foreach (var property in operationQueryParameter.Schema.ActualProperties)
                        {
                            @:urlStringBuilder.AppendFormat("{0}={1}&", "@property.Key", @($"{operationQueryParameter.VariableName}.{Model.Settings.CodeGeneratorSettings.PropertyNameGenerator.Generate(property.Value)}"));
                        }
                        *@
                        @:urlStringBuilder.Append(SerializeToQueryString(@operationQueryParameter.VariableName));
                    }
                    else
                    {
            @:urlStringBuilder.AppendFormat(@(parameterIndex < queryParametersList.Count - 1 ? Raw("\"{0}={1}&\"") : Raw("\"{0}={1}\"")) , "@operationQueryParameter.VariableName", @RenderEncodeParameterSegment(operationQueryParameter));
                    }
                }
            }
            httpRequestMessage.Method = new System.Net.Http.HttpMethod("@operation.HttpMethodUpper.ToUpper()");
            httpRequestMessage.RequestUri = new System.Uri(urlStringBuilder.ToString());
            @if (operation.HasAcceptHeaderParameterParameter)
            {
            @:httpRequestMessage.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("@operation.Produces"));
            }
            @if (operation.HasContent)
            {
                if (operation.HasBinaryBodyParameter || operation.HasXmlBodyParameter)
                {
            <text>
            System.Net.Http.StreamContent content = new System.Net.Http.StreamContent(@operation.ContentParameter.VariableName);
            </text>
                }else
                {
            <text>
            System.Net.Http.StringContent content = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@operation.ContentParameter.VariableName, _serializerSettings));
            </text>            
                }
            <text>
            content.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("@operation.Consumes");
            httpRequestMessage.Content = content;
            </text>
            }
            return await _httpClient.SendAsync(httpRequestMessage);
        }
    }
    </text>
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
        if (value is System.Enum)
        {
            string name = System.Enum.GetName(value.GetType(), value);
            if (name != null)
            {
                var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                if (field != null)
                {
                    var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) as System.Runtime.Serialization.EnumMemberAttribute;
                    if (attribute != null)
                    {
                        return attribute.Value;
                    }
                }
            }
        }
        return System.Convert.ToString(value, cultureInfo);
    }

    private string SerializeToQueryString(object request)
    {
        return string.Join("&", System.Linq.Enumerable.Select(request.GetType().GetProperties(), property => $"{property.Name}={System.Uri.EscapeDataString(property.GetValue(request).ToString())}"));
    }
}
@functions 
{
    IRawString CreateMethodArguments(CSharpOperationModel operation)
    {
        var cSharpParameterModels = operation.Parameters.Select(parameter => $"{parameter.Type} {parameter.VariableName.ToLower()}");
        return Raw(string.Join(", ", cSharpParameterModels));
    }

    IRawString CreateMethodParameters(CSharpOperationModel operation)
    {
        var cSharpParameterModels = operation.Parameters.Select(parameter => $"{parameter.VariableName.ToLower()}");
        return Raw(string.Join(", ", cSharpParameterModels));
    }
    
    IRawString RenderEncodeParameterSegment(CSharpParameterModel parameterModel)
    { 
        if (parameterModel.IsDateArray)
        {
            return Raw($@"System.Uri.EscapeDataString(string.Join("","", System.Linq.Enumerable.Select({parameterModel.VariableName.ToLower()}, item => item.ToString(""{Model.ParameterDateTimeFormat}"", System.Globalization.CultureInfo.InvariantCulture))))");
        }
        if (parameterModel.IsDate)
        {
            return Raw($@"System.Uri.EscapeDataString({parameterModel.VariableName.ToLower()}.ToString(""{Model.ParameterDateTimeFormat}"", System.Globalization.CultureInfo.InvariantCulture))");
        }

        if (parameterModel.IsArray)
        {
            return Raw($@"System.Uri.EscapeDataString(string.Join("","", System.Linq.Enumerable.Select({parameterModel.VariableName.ToLower()}, item => ConvertToString(item, System.Globalization.CultureInfo.InvariantCulture))))");
        }
        
        return Raw($@"System.Uri.EscapeDataString(ConvertToString({parameterModel.VariableName.ToLower()}, System.Globalization.CultureInfo.InvariantCulture))");
    }

    bool IsComplexQueryParameter(CSharpParameterModel parameterModel)
    {
        return !(parameterModel.Schema is SwaggerParameter);
    }
}